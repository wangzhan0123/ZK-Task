此文档是在参考uncode_schedule源码之后，通过调试整理出来的，由于个人能力有限，如使用者有新的认识，可以与本人分享（wangfusheng@aisino.com）
uncode-schedule
     是基于ZooKeeper结合spring的ThreadPoolTaskScheduler，里面有如下几个功能类
ZKScheduleManager：调度器核心管理
IScheduleDataManager(实现类ScheduleDataManager4ZK)：调度配置中心客户端接口，可以有基于数据库的实现，可以有基于ConfigServer的实现，此处是基于配置实现的
ZKManager：连接zk的客户端管理类
DynamicTaskManager：动态调用任务定时任务的触发类
ConsoleManager：对外提供动态定时器的接口类
ManagerServlet：web页面，提供增删查定时器任务，直接调用ConsoleManager
运行原理和实现步骤：
    运行原理：
               相同web应用注册相同Zookeeper ip(可以是zookeeper集群)和相同目录(如/uncode/schedule)，注册成功后会创建子目录uncode/schedule/server，uncode/schedule/task，
       相应地会创建子目录uncode/schedule/server/serverid,serverid表示注册成功的web应用的uuid（全局唯一标识，区别于不同的web应用），
       通过应用心跳检查观察zk相关目录(task)及子目录的变化，执行任务，保证web集群服务的同一定时器任务同一时间只能在一个web节点上执行，具备高可用
	实现接口：
 	   增加定时器：web应用在已连接Zookeeper的task目录下创建springId#methodName的子目录
 	   调用定时器：ZkScheduleManager心跳频率检查是由web应用的leader控制分配任务，在task/springId#methodName下面创建serverid(server目录下面serverids随机取出的serverid)子目录
 	   					  springId#methodName 的有serverid的web应用调用
    实现步骤：
       Spring配置ZKScheduleManager相关参数，ZKScheduleManager是整个应用的入口，也是整个应用的核心
 1.ZKScheduleManager继承了ThreadPoolTaskScheduler，重写了schedule方法，用于定时调度任务
 2.ZKManager 连接Zookeeper的管理器
 3.注入了scheduleDataManager用于管理Zookeeper和schedule之间的管理
 4.InitialThread初始化线程，保证在Zk状态正常后回调数据初始化， 注册调度管理器
     hearBeatTimer心跳任务检查，检查zk的连接状态
      A任务： refreshScheduleServer(定时向数据配置中心更新当前服务器的心跳信息。 如果发现本次更新的时间如果已经超过了，
                  服务器死亡的心跳周期，则不能在向服务器更新信息。 而应该当作新的服务器，进行重新注册。)
       
     
